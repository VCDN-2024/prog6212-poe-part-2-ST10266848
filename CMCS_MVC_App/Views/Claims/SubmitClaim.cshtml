@model CMCS_MVC_App.Models.Claim

@{
    ViewData["Title"] = "Submit Claim";
}

<h2>Submit Claim</h2>

<div class="row">
    <div class="col-md-9">
        <form asp-action="SubmitClaim" asp-controller="Claims" enctype="multipart/form-data" method="post">
            @* <div asp-validation-summary="All" class="text-danger"></div> *@
            <div class="form-group">
                <label asp-for="HoursWorked" class="control-label">Hours Worked</label>
                <input asp-for="HoursWorked" class="form-control" />
                <span asp-validation-for="HoursWorked" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="AdditionalNote" class="control-label">Additional Note</label>
                <textarea asp-for="AdditionalNote" class="form-control"></textarea>
                <span asp-validation-for="AdditionalNote" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label for="DocumentContent">Upload Supporting Document (PDF only):</label>
                <input type="file" name="DocumentContent" id="DocumentContent" class="form-control" accept=".pdf" />
                <span id="fileSizeError" style="color: red; display: none;"></span>

                @if (!ViewData.ModelState.IsValid && ViewData.ModelState["DocumentContent"]?.Errors.Count > 0)
                {
                    <span style="color: red;">@ViewData.ModelState["DocumentContent"].Errors[0].ErrorMessage</span>
                }
            </div>
            <div class="form-group">
                <button type="submit" value="Submit Claim" class="btn btn-primary">Submit</button>
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="LecturerClaim" class="btn btn-secondary">Back to List</a>
</div>


<script>
    document.getElementById('claimForm').addEventListener('submit', function (event) {
        const fileInput = document.getElementById('DocumentContent');
        const fileSizeError = document.getElementById('fileSizeError');

        // Clear previous error message
        fileSizeError.style.display = 'none';

        if (fileInput.files.length > 0) {
            const file = fileInput.files[0];

            // Check if file size exceeds 1 MB (1 MB = 1048576 bytes)
            if (file.size > 1048576) {
                fileSizeError.textContent = 'File size must not exceed 1 MB.';
                fileSizeError.style.display = 'block';

                // Prevent form submission
                event.preventDefault();
            }
        }
    });
</script>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}